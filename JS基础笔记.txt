JS基础
8月5日
1.  alert()  弹出“警告框”
    console.log()   控制台输出。
    prompt()  用户输入语句
	prompt()语句中，用户不管输入什么内容，都是字符串。

2.  “字面量”即常量，是固定值，不可改变。
3.   变量：变量可以用来保存字面量，而且变量的值可以任意改变。
4.  变量的命名规则：
 	-变量命名必须以字母或是下标符号”_”或者”$”为开头。
	-.不能以数字开头
	-.不能是 js 中的关键字和保留字
	-严格区分大小写
	-.建议用驼峰命名规则：getElementById
	-见名知意

5. 变量的数据类型有两种:  基本数据类型 和 引用数据类型
	基本数据类型：存放在 栈内存（stack） 中，可以直接访问。（String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。）
	引用数据类型：存放在 堆内存（heap） 中，变量在栈内存中实际保存的是一个指针，这个指针指向堆内存当中对应的数据。

6. String 字符串
 	  需要加引号, 且引号不能嵌套。但是单引号里可以嵌套双引号,反之也可以。
	  转义字符：\  	  \" 表示 "	   \n 表示换行   \r 表示回车   \t 表示制表符    \b 表示空格    \\ 表示\

7. Number 数值类型    包括整数和浮点数（小数）。
	最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308
	最小值：Number.MIN_VALUE，这个值为： 5e-324
	如果变量超过了最大值，则会返回 Infinity。
		无穷大（正无穷）：Infinity
		无穷小（负无穷）：-Infinity
	注意：typeof Infinity的返回结果是 number。

8. NaN 和 isNaN()函数：
	NaN是一个特殊的数字，表示 Not a Number
	注意：typeof NaN的返回结果是 number。
	NaN 与任何值都不相等，包括 NaN 本身。
	isNaN()  任何不能被转换为数值的值，都会让这个函数返回 true。

9. 浮点数的运算：
	在 JS 中，整数的运算基本可以保证精确；但是小数的运算，可能会得到一个不精确的结果。所以，千万不要使用 JS 进行对精确度要求比较高的运算。

10.  Boolean 布尔值
	true 和 fase。主要用来做逻辑判断。

11. undefined 未定义
	声明了一个变量，但是没有赋值，此时它的值就是 undefined。

12. null 空值
	专门用来表示空对象。
	使用 typeof 检查一个 null 值时，会返回 object。

13. Object 对象
	Object 对象   是一组由 属性名:属性值 (键值对) 组成的无序集合
		var person = {
		name: "张三",
		age: 30,
		like: ["篮球", "足球", "看书"]
		};
	Array 数组   是一组按顺序排列的集合，集合的每个值称为元素。数组可以包括任意数据类型。但是通常用来表示某一类数据的集合。
		var arr = [1, 2, "hello", undefined, true, { age: 30 }, [3, 4]];
	Function函数   用来封装代码
		function wheel() {}
	这里边,内置对象Function、Array、Date、RegExp、Error等都是属于Object类型

14.  其他的基本类型 --> String
	方法一：变量+"" 
	方法二：调用 toString()方法
		注意：null 和 undefined 这两个值没有 toString()方法
		Number 类型的变量，在调用 toString()时，可以在方法中传递一个整数作为参数。此时它将会把数字转换为指定的进制，如果不指定则默认转换为 10 进制
	方法三：使用 String()函数

15. 其他的基本数据类型 --> Number
	方式一：使用 Number()函数
		如果字符串中有非数字的内容，则转换为 NaN。
		如果字符串是一个空串或者是一个全是空格的字符串，则转换为 0。
		true 转成 1   false 转成 0
		null --> 数字     结果为：0
		undefined --> 数字   结果为：NaN
	方式二：parseInt()：字符串 -> 整数    专门用来对付字符串
		将字符串中的有效的整数内容转为数字。parse 表示“转换”，Int 表示“整数”
		转换规则: 从第一个非空白字符（空格、换行、tab）开始转换，直到遇到一个非数字字符为止。
		如果对非 String使用 parseInt()或 parseFloat()，它会先将其转换为 String然后再操作。

 		parseFloat()：字符串 --> 浮点数（小数）  也是是专门用来对付字符串的。
			parseFloat()和 parseInt()的作用类似，不同的是，parseFloat()可以获得有效的小数部分。
	
16.转换为Boolean
	方法:使用Boolean()函数。
	数字 --> 布尔。除了0和NaN，其余的都是true。
	字符串 ---> 布尔。除了空串，其余的都是true。
	null和undefined都会转换为false。
	对象也会转换为true。

17.  算术运算符	
	任何值做-、*、/, %运算时都会自动转换为 Number。我们可以利用这一特点，为一个值-0、*1、/1来将其转换为 Number
	任何的值和字符串做加法运算，都会先转换为字符串，然后再做拼串操作
	任何值和 NaN 做运算的结果都是 NaN。

18. 赋值运算符	
	+=     a += 5 等价于 a = a + 5
	-=       a -= 5 等价于 a = a - 5
	*=      a *= 5 等价于 a = a *5
	/=       a /= 5 等价于 a = a / 5
	%=     a %= 5 等价于 a = a % 5

19.自增自减
 	b= a++    先赋值再++, (自增前的值)
	b=++a     先++再赋值,(自增后的值)

20. 比较运算符
	>	大于号
	<	小于号
	>= 	大于或等于
	<=  	小于或等于
	== 	等于
	===	 完全等于
	!=	不等于
	!== 	不全等于
             

	
21. 非数值的比较 会将其转换为数字然后再比较。
     特殊情况：如果符号两侧的值都是字符串，不会将其转换为数字进行比较, 而是比较的是字符串的Unicode 编码。
	比较字符编码时，是一位一位进行比较。如果两位一样，则比较下一位，所以借用它可以来对英文进行排序。
     任何值和NaN做任何比较都是false
     ===严格等于    先比较数据类型,再比较大小
     ==的反面是!=，===的反面是!==

22.    console.log(undefined == null); // true           undefined 衍生自 null，所以这两个值做相等判断时，会返回 true。
	Javascript规范中提到， 要比较相等性之前，不能将 null 和 undefined 转换成其他任何值，
       	 并且规定null 和 undefined 是相等的。null 和 undefined都代表着无效的值。

2019-8-6
1. Date 对象的创建
 	Date对象(时间对象) 是一个 构造函数 需要 new 出来一个实例对象 才能使用
	  var date1 = new Date();     获取当前时间对象
  	  var date2 = new Date("2017/09/06 09:00:00");  在参数中传递一个表示时间的字符串

2. 获取日期和时间
	getDate() 获取日 1-31
	getDay() 获取星期 0-6（0 代表周日，1 代表周一）
	getMonth() 获取月 0-11（0 代表一月）
	getFullYear() 获取年份
	getHours() 获取小时 0-23
	getMinutes() 获取分钟 0-59
	getSeconds() 获取秒 0-59
	getMilliseconds() 获取毫秒 （1s = 1000ms）

3. getTime()：获取时间戳
	时间戳：指的是从格林威治标准时间的1970年1月1日，0时0分0秒到当前日期所花费的毫秒数

4. Math 对象的用法
	Math.abs()	返回绝对值	
	Math.floor()	向下取整（向小取）	
	Math.ceil()	向上取整（向大取）	
	Math.round()	四舍五入取整	
	Math.random()	生成 0-1 之间的随机数	包含 0 不包含 1
	Math.max(x, y, z)	返回多个数中的最大值	
	Math.min(x, y, z)	返回多个数中的最小值	
	Math.pow(x,y)	返回 x 的 y 次幂	
	Math.sqrt()	对一个数进行开方运算
	Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。
	Math 属于一个工具类，里面封装了数学运算相关的属性和方法。

5. 逻辑运算符：
	&& 与（且）：两个都为真，结果才为真。
	|| 或：只要有一个是真，结果就是真。
	! 非：对一个布尔值进行取反。

	注意:  能参与逻辑运算的，都是布尔值。如果对非布尔值进行逻辑运算，则会先将其转换为布尔值，然后再操作。

6. 非布尔值进行与或运算时，会先将其转换为布尔值，然后再运算，但返回结果是原值。

7.流程控制语句分类
	顺序结构
	选择结构：if 语句、switch 语句
	循环结构：while 语句、for 语句

8.三元运算符
	5 > 3 ? "5大于3" : "5不大于3";  // 返回'5大于3'

9. 代码调试
	首先将程序执行完成后，调出控制台,点击Sources, 然后设置断点
	监视变量变化 - 直接将鼠标放到变量名上即可显示 

10. for 循环
	for (var i = 1; i <= 100; i++) {
	console.log(i);
	}

11. switch 语句（条件分支语句）
	var num = 4;
	switch (num) {
	case 1:
		console.log("星期一");
		break;
	case 2:
		console.log("星期二");
		break;
	.........
		console.log("星期日");
		break;
	default:
		console.log("你输入的数据有误");
		break;
	}

12. while 循环
	while(条件表达式){
	语句...
	}

13. do...while 循环
	do{
	语句...
	}while(条件表达式)

14. break 和 continue
	break 会立即终止离它最近的那个循环语句。（循环语句包括 for、while）
	continue 用来跳过当次循环。

8月7日
1. 数组    属于内置对象
2. 数组和普通对象的区别
普通对象是使用字符串作为属性名的    可以根据属性名获取值
	var user{
                name:"张三",
                age:23,
                child:{
                 name:"小明",
                 age:5
                }
                }
数组是使用数字(下标)来作为索引来操作元素
	 var arr=[4,undefined,null,true,"字符串",[1,2,3]]
	数组的元素可以是任意的数据类型，可以是对象，也可以是函数，也可以是数组。

3. 创建数组对象
	方式一：字面量定义。
	var arr = [1, 2, 3];
	方式二：对象定义（数组的构造函数）。
	var arr = new Array();
	如果参数为空，则表示创建一个空数组；参数是一个数值时，表示数组长度；参数是多个数值时，表示数组中的元素。

4. 增改查      通过下标
        如何给数组添加元素 
        arr[4] = 20;
        如何获取(查找)元素
        console.log(arr[2]);
        修改数组当中的 某个元素
        arr[2] = 33;
        数组的长度:  数组元素的个数 (最大索引+1)    .length 属性
       arr.length

5.修改数组的长度（修改 length）
	如果修改的 length 大于原长度，则多出部分会空出来，置为 null(empty)
	如果修改的 length 小于原长度，则多出的元素会被删除，数组将从后面删除元素。

6. 遍历数组元素
	for (var i = 0; i < arr.length; i++) {}

7.    数组的基本方法 
       删除    pop()和 shift() 
       pop() 删除数组的最后一个元素 ,   修改了原数组 , 返回值: 删除的那个元素
        arr.pop();
        shift()   删除数组的第一个元素, 修改了原数组,  返回值: 删除的那个元素
        arr.shift();
      
8.  添加     push()   和  unshift()
        push 从后添加(添加到数组的末尾)   ,修改了原数组, 返回值:  修改后数组的长度
        arr.push(20);
        unshift() 从前添加(添加到数组的开头) , 修改原数组, 返回值:  修改后数组的长度
        arr.unshift(0);
     
9. join()：将数组转换为字符串，返回结果:  转换后的字符串（不会改变原来的数组）。
        join()方法可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符；
        如果不指定连接符，则默认使用 , 作为连接符
        var nameArr = ['张三', '李四', '王五'];
        var nameStr = nameArr.join('-');
        console.log(nameStr); //转换后,返回值为转换后的字符串
        console.log(nameArr); //原来的数组没有改变

10. split() 可以将字符串 转换成数组  返回: 转换后的数组(不改变原来的字符串)
         指定参数 以什么 来过分割 这个字符串
        新数组 = 原字符串.split(分隔符, 数组长度);
        var emailStr = "abc@163.com;cc@126.com;frg@qq.com";
        var emailArr = emailStr.split(';',2); //指定分隔符指的是分开字符串的位置
        console.log(emailArr); //返回值: 转换后的数组
        console.log(emailStr); //不改变原来的字符串

11. concat()  连接两个或多个数组，返回结果为新的数组。（不会改变原数组）
      
12.冒泡排序  
	 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
	对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对
	 var arr = [23, 45, 12, 9, 47, 11];
	 for(var j=1;j<arr.length;j++){
                 for (var i = 0; i < arr.length - j; i++) {
                 if (arr[i] > arr[i + 1]) {
                 var temp = arr[i];
                 arr[i] = arr[i + 1];
                 arr[i + 1] = temp;
                }
                }
                 }
    	 console.log(arr);

13.选择排序
	每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，
	然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。
	以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。
	 var arr = [6, 2, 4, 5, 3, 1];
	for(var j=0;j<arr.length-1;j++){
  	     var minIndex=j
        	    for(var i=j+1;i<arr.length;i++){
         	       if(arr[minIndex]>arr[i]){
          	          minIndex=i;
          	      }
        	    }
        	    var temp=arr[j];
         	   arr[j]=arr[minIndex];
         	   arr[minIndex]=temp;
      	  }
      	  console.log(arr);
14. 插入排序
	 var arr = [8, 6, 3, 4, 2, 9];
	 for (var i = 0; i < arr.length; i++) {
                var temp = arr[i];
                var j=i-1;
                while (temp<arr[j]&&j>=0){
                    arr[j+1]=arr[j];
                    j--;
                }
                arr[j+1]=temp;
                }
              console.log(arr);


8月8日
1. 创建函数 
         第一种  通过   function 关键字
          具名函数  say是函数名, 函数名的命名规则  同变量命名规则 一致
        function say() {             
            alert('你好');
        }

2.第二种:  函数表达式
        匿名函数 赋值给一个 变量
        var foo = function () {
            alert('我是一个函数表达式')
        }

3.  第三种 立即执行函数(自执行函数)
         在创建的同时就会执行一次,  立即执行函数往往只会执行一次。因为没有变量保存它，执行完了之后，就找不到它了。
        (function(a,b){
            alert('我是一个立即执行函数');
	 console.log("a = " + a);
     	       console.log("b = " + b);
   	     })(122,456) ;

4.函数调用：  函数名字( );      函数必须调用才会执行

5.实参和形参
 function say(str) { //str是一个形参, 占位用,在没有调用之前 不知道他的值是什么(undefined)
            alert(str);
        }
        say('你好呀!'); // '你好呀!'  称之为 实参 , 调用时 会把实参的值 赋值给 形参变量
        // 实际参数和形式参数的个数，要相同。(通常来讲)     多个形参之间使用  , 隔开，
        function add(a, b) {
            console.log(a + b);
        }
        add(1, 3);
        // 实参个数 小于形参个数
        add(1); // NaN
        // 实参个数 大于  形参个数
        // 多出来的实参 不管
        add(1, 2, 3); // 3

6. 函数的返回值
  	 function sum(a, b) {
                 console.log(a + b);
         	   // 把 a+b 的结果丢出去 当做这个函数的返回值(当做这个函数的结果)
           	 return a + b;
          	  //return 语句之后的代码 不再执行(函数里边 遇到return  函数执行就结束)
   	     }
 	       // 把sum函数运行的结果 赋值给 num 变量
   	     var num = sum(1, 3);
     	   console.log(num); // 4

    	    console.log(sum); // sum函数          函数对象。相当于直接获取了函数对象
       	 console.log(sum(2, 4)); // 打印函数执行的返回值       调用函数。相当于获取了函数的返回值。
	如果函数中没有return语句,无法返回在函数外部获取函数的返回值.

7. 全局作用域     script 标签下
	在全局作用域中有一个全局对象 window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用。
	在全局作用域中：
		创建的变量都会作为 window 对象的属性保存。
		创建的函数都会作为 window 对象的方法保存。
	全局作用域中的变量都是全局变量，在页面的任意的部分都可以访问的到。

8. 函数作用域
	在函数体内部的 声明的变量
	如果一个变量在函数体内部声明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。

9.作用域的上下级关系
                变量查找规则  就近原则  先找自身作用域,找不到 就到父级作用域查找
	在函数中要访问全局变量可以使用 window 对象。（比如说，全局作用域和函数作用域都定义了变量 a，如果想访问全局变量的a，可以使用window.a）

10.  函数声明提升 (必须是function关键字声明的具名函数)
        把function 声明的 函数  提升到顶部
         say();
         function say() {
         alert('你好');
          }

         bar();     // bar is not a function  bar不是function关键字声明的具名函数
         var bar = function () {     //匿名函数
          alert('bar函数');
         }
        真正的执行顺序                
         var bar;
         bar();
         bar = function(){}

        在函数作用域中也有声明提前的特性：
        function foo() {
            console.log(c);      // undefined 说明变量存在,但赋值语句没有提升.
            var c = 10;
        }
        foo();


11. 变量声明提升
         console.log(a);      // undefined 说明变量存在
         var a = 10;
         把声明 过程提升到了顶部 ,赋值操作 并未提升

12. 参数的数据类型
 基本数据类型作为参数传递时,并不影响原来的数据
 引用数据类型作为参数传递时,会影响原数据

13. 栈内存和堆内存
	JS 中，所有的变量都是保存在栈内存中的。
	基本数据类型的值，直接保存在栈内存中。
	引用数据类型是保存到堆内存中的, 变量保存了对象的内存地址

8月9日
1. 对象的分类
	内置对象：Array  Object  Math  tring、Number、Boolean、Function、Object....
	宿主对象： DOM 和 BOM   console、document
	自定义对象： 由开发人员自己创建的对象

2. 对象    用来封装信息, 用来描述一个事物
             属性名:属性值(键值对)的无序集合
             对象具有属性(特征) 和 方法(行为)
             每个属性之间 用逗号隔开

 3. 创建对象
	方法1: 使用对象字面量
	var obj = {   };

	方法2:  通过Object这个顶级对象   new一个对象
      	  var obj2 = new Object();

	方式三   通过自定义构造函数  new 一个对象
                 构造函数 和 普通函数的区别  函数名首字母大写
       	 function People(name, age) {
            	this.name = name;
    	    }
    	    var zs = new People('张三', 24); //zs是创建出来的实例对象
         
4.     给对象添加属性
        obj1.name = '张三';
        修改属性
        obj1.name = '李四';
        删除属性
        delete obj1.age;

5.  遍历对象
        for (var key in obj) {
            console.log(key); //仅仅打印了这个对象的所有属性名
            // obj.xx 获取属性值时,如果 xx 是个变量(会变化)  需要采用  obj[xx]获取属性值
            console.log(obj[key]);
         }

6. JSON 对象 
	   是一种轻量级的数据交换格式。
	对象 数组 这些  是没有办法进行传输的, 文本可以进行传输
                JSON的 两个方法可以传输对象和数组

	将对象变成json 字符串
                如果想把movie保存的数据传给后台,需要把对象转换为字符串
     	   var jsonStr = JSON.stringify(movie);
   	   
        	将json 字符串变回对象   只有json 字符串  才能变回对象
        	如果想对数据进行增删改查,需要把传过来的文本json字符串变回对象
       	 var jsonObj = JSON.parse(jsonStr);

7. 数组高级方法
	forEach()方法   帮我们遍历数组
        支持一个函数 作为参数(回调函数), 这个回调函数 会帮我们 处理遍历到的  每一个数组元素
        回调函数里边  支持三个参数  第一个 遍历到的元素(item) ,第二个参数(遍历元素对应的下标index),第三个参数(你遍历的数组)
        第一个参数 必须写,其余两个参数可以省略
        arr.forEach(function (item, index, arr) {
            这里需要写你对数组元素的操作
          })

         reverse()  反转数组
        var arr1 = [2, 4, 6, 8];
        var result1 = arr1.reverse(); // 修改了原数组
        console.log(result1); // 返回值是反转后的数组

        slice() 截取数组   arr.slice(开始的索引,结束的索引);不包括结束索引的值
         并不会修改原数组
        var cloneArr2 = arr2.slice(0); //结束索引省略的话 相当于截取到最后
        // 通过这种形式拿到的 副本 ,对其做修改 并不会影响原数组
      
        splice()  删除或者替换数组当中的元素   修改原数组
        第一个参数 从哪个索引开始替换 ,第二个参数你要替换几个元素, 后边的参数 用谁来替换
        arr.splice(1, 2, 10, 11);
        arr.splice(3, 1); // 后边的参数不写  相当于删除操作
      
        indexOf()和lastIndexOf()  返回元素在数组中的 索引
        var arr4 = ['a', 'b', 'b', 'd', 'e'];
        var index1 = arr4.indexOf('b'); // 1  从前往后匹配
        var index2 = arr4.lastIndexOf('b'); // 2  从后往前匹配
        var index3 = arr4.indexOf('f'); // 匹配不到 返回 -1;

8. sort  按照unicode编码顺序来排 
           会改变原来的数组
	不带参数时按照unicode 编码的顺序来排列
                带参数时,可以制定排序规则, 函数作为参数
	 arr.sort(function (a, b) {
                 return a - b; //从小到大升序
   	     })
     	   arr.sort(function (a, b) {
     	       return b - a; // 从大到小  降序
  	      })

9. 字符串对象的常用方法
	charAt() 获取相应位置的字符
	charCodeAt() 获取指定位置字符 的 Unicode 编码
	indexOf() 返回字符在字符串中的位置,从前往后找
	lastIndexOf() 返回字符在字符串中的位置,从后往前找
	concat() 连接字符串
	slice() 提取字符串的某个部分
	substr() 截取字符串
	toUpperCase()  变成大写 不会改变原字符串
	toLowerCase()   变成小写 不会改变原字符串
   
     
  
       
        



